<%

/*
WebExtBrowserCompatTable.ejs
----------------------------
Generates and returns a compat table.

This may be called with one or two arguments.

* if called with one argument, the argument must be a compat data JSON object
which contains a "__compat" property. For example:

  {
    __compat: {
      basic_support: {...}
    }
  }

In this case, the macro generates an
"feature table": that is, a table containing detailed compat data for the
object, taken from the data contained in the "__compat" property.

* if called with two arguments, the first argument must be a compat JSON
which does not itself contain a "__compat" property, but each of whose own
properties contains one. For example:
  {
    clear: {
      __compat: {...}
    },  
    get: {
      __compat: {...}
    },  
    remove: {
      __compat: {...}
    }  
  }
In this case, the macro generates a "aggregate table": that is, a table
containing aggregated compat data for the child properties of the compat object.
 
The second argument must be a relative URL pointing to the docs page for
the aggregating object, omitting the locale. For example:

    "/Add-ons/Extensions/API/alarms"

*/

var s_firefox_android = mdn.localString({
    "en-US": "Firefox for Android"
});

var s_yes = mdn.localString({
    "en-US": "Yes"
});

var s_no = mdn.localString({
    "en-US": "No"
});

var s_unknown = mdn.localString({
    "en-US": "?"
});

var s_basic_support = mdn.localString({
    "en-US": "Basic support"
});

/* dictionary mapping the browser identifiers in the compat JSON to
names we want to include in tables.
*/
const browserNames = {
  chrome: "Chrome",
  edge: "Edge",
  firefox: "Firefox",
  firefox_android: s_firefox_android,
  opera: "Opera"
};

const lang = env.locale;

/*
Write the table header. Column 0 gets 40% of the available width,
and the rest is distributed between the browsers we will list.
*/
function writeTableHead() {
  let browserNameKeys = Object.keys(browserNames);
  let output = '<table class="webext-summary-compat-table"><thead><tr><th style="width: 40%"></th>';
  let browserColumnWidth = 60/browserNameKeys.length;
  for (let browserNameKey of browserNameKeys) {
    output += `<th style="width:${browserColumnWidth}%">${browserNames[browserNameKey]}</th>`;
  }
  output += "<tr></thead>";
  return output;
}

/*
Given the value of `version_added`, this returns:
  * a string to appear in the table cell, like "Yes" or "?"
  * a CSS class to apply to the cell.
  
  `json_version_added` is a value for `version_added`
*/
function getSupportInfo(json_version_added) {
  switch (json_version_added) {
    case null:
      return {class: "unknown-support", text: s_unknown};
      break;
    case true:
      return {class: "full-support", text: s_yes};
      break;
    case false:
      return {class: "no-support", text: s_no};
      break;
    default:
      return {class: "full-support", text: json_version_added};
  }
}

/*
Generate an aggregate table that summarises the support status for the
individual features under the data it's passed.
Each row in the table will contain the "basic_support" data for a single feature.
The first cell in each the row will contain a link to the feature's page.

`json_identifier` is an `identifier` JSON object.
*/
function writeAggregateTable(json_identifier, moduleUrl) {
  let output = writeTableHead();
  output += "<tbody>";
  // add a row for each feature
  for (let featureName of Object.keys(json_identifier).sort()) {  
    output += "<tr>";      
    let featureData = json_identifier[featureName]["__compat"];
    // build a URL to the feature's page
    let featureUrlPieces = [lang, moduleUrl].concat(featureName.split("."));
    let featureUrl = "/" + featureUrlPieces.join("/");
    // the first cell is the name of the feature, linked to its page
    output += `<td><a href="${featureUrl}"><code>${featureName}</code></a></td>`;
    // then one cell for each browser
    for (let browserNameKey of Object.keys(browserNames)) {
      let supportData = featureData["basic_support"]["support"][browserNameKey];
      let supportInfo = getSupportInfo(supportData.version_added);
      // add an asterisk if the simple value isn't the whole story.
      // This happens if some other subfeatures have a different "version_added"
      // value, or if there are any notes.
      let needsAsterisk = false || supportData.notes;
      for (subfeatureName of Object.keys(featureData)) {
        let browserSupport = featureData[subfeatureName]["support"][browserNameKey];
        if ((browserSupport["version_added"] != supportData.version_added) ||
            (browserSupport["notes"])) {
          needsAsterisk = true;
        }
      }
      if (needsAsterisk) {
        supportInfo.text = `${supportInfo.text} <a href="${featureUrl}#Browser_compatibility">*</a>`;
      }
      output += `<td class="${supportInfo.class}">${supportInfo.text}</td>`;
    }
    output += "</tr>";
  }
  output += "</tbody></table>";
  return output;
}

/*
Iterate into all "support" objects, and all browsers under them,
and collect all notes in an array, without duplicates.

`json_subfeature_set` is a `subfeature_set` JSON object.
*/
function collectCompatNotes(json_subfeature_set) {
  let browserNotesArray = [];
  for (let subfeature of Object.keys(json_subfeature_set)) {
    let support = json_subfeature_set[subfeature]["support"];
    for (let browserName of Object.keys(support)) {
      if (support[browserName].hasOwnProperty("notes")) {
        for (let note of support[browserName]["notes"]) {
          if (browserNotesArray.indexOf(note) === -1) {
            browserNotesArray.push(note);
          }
        }
      }
    } 
  }
  return browserNotesArray;
}

/*
For a single row, write all the cells that contain support data.
(That is, every cell in the row except the first, which contains
an identifier for the row,  like "Basic support".

`json_subfeature` is a `subfeature` JSON object.
*/
function writeSupportCells(json_subfeature, compatNotes) {
  let output = "";
  for (let browserNameKey of Object.keys(browserNames)) {
    let supportData = json_subfeature["support"][browserNameKey]
    let supportInfo = getSupportInfo(supportData.version_added);
    // if there are notes...
    if (compatNotes && supportData.notes) {
      // then add a link to the footnote containing the note's text
      for (let note of supportData.notes) {
        let noteIndex = compatNotes.indexOf(note);
        supportInfo.text = `${supportInfo.text} <sup><a href="#compatNote_${noteIndex+1}">${noteIndex+1}</a></sup>`;
      }
    }
    output += `<td class="${supportInfo.class}">${supportInfo.text}</td>`;
  }
  return output;
}

/*
Generate a table that contains the detailed compat data for a single feature.
The first row will contain the "basic_support" data.
Any subsequent rows will contain "sub-feature" support data.

`json_subfeature_set` is a `subfeature_set` JSON object.
*/
function writeFeatureTable(json_subfeature_set) {
  let compatNotes = collectCompatNotes(json_subfeature_set);
  let output = writeTableHead();
  output += "<tbody>";
  // write basic support first
  output += `<tr><td>${s_basic_support}</td>`;
  output += `${writeSupportCells(json_subfeature_set["basic_support"], compatNotes)}</tr>`;
  // then all the other sub-features, one per row
  for (let row of Object.keys(json_subfeature_set)) {
    if (row != "basic_support") {
      output += `<tr><td><code>${row}</code></td>`
      output += `${writeSupportCells(json_subfeature_set[row], compatNotes)}</tr>`;
    }
  }
  output += "</tbody></table>";  
  // write each compat note, with an `id` so it will be linked from the table.
  for (let note of compatNotes) {
    let noteIndex = compatNotes.indexOf(note);
    output += `<span id=compatNote_${noteIndex+1}>${noteIndex+1}. ${note}</span><br/>`;
  }
  return output;
}

var output = "";
var compatJson = $0;
if (compatJson.hasOwnProperty("__compat")) {
  output = writeFeatureTable(compatJson["__compat"]);
} else {
  if (!$1) {
    throw "Compat data must contain '__compat', or a URL must be passed as a second argument"
  }
  output = writeAggregateTable($0, $1);
}

%>
<%-output%>
